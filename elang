#!/usr/bin/env python

import click
import sys

from core.lexer import Lexer
from core.parser import Parser
from core.tokens import tokens_from_file, tokens_to_lines


lexer = Lexer()
parser = Parser()


has_file_option = click.option(
    '--file',
    help='file used as input',
    type=click.File('r'),
    default=sys.stdin)


has_format_option = click.option(
    '--format',
    help='format of stdout',
    type=click.Choice(['lines', 'json'], case_sensitive=False),
    default='lines')


@click.group()
def cli():
    pass

@cli.command()
@has_file_option
@has_format_option
def lex(file, format):
    """Perform Lexical Analysis"""
    with file:
        text = file.read()  # entire file
        tokens = lexer(text)
        if format == 'lines':
            for line in tokens_to_lines(tokens):
                print(line)
        elif format == 'json':
            raise click.ClickException('format not implemented')
        else:
            raise click.ClickException('invalid format')


@cli.command()
@has_file_option
@has_format_option
def parse(file, format):
    """Perform Syntactic Analysis"""
    with file:
        tokens = tokens_from_file(file)
        ast = parser(tokens)
        if format == 'lines':
            for line in ast.as_lines():
                print(line)
        elif format == 'json':
            print(ast.as_json())
        else:
            raise click.ClickException('invalid output format')


if __name__ == '__main__':
    cli()
